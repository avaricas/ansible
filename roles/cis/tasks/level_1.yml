---
- name: 1 Initial Setup
  block:
    - name: 1.1 Filesystem Configuration
      block:
        - name: 1.1.1 Disable unused filesystems
          block:
            - name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
              block:
                - name: 1.1.1.1 Ensure mounting of cramfs filesystems is disabled
                  ansible.builtin.lineinfile:
                    dest: "{{ cis_modprobe_conf_path }}"
                    regexp: "^#?.*install cramfs"
                    line: "install cramfs /bin/true"
                    create: true
              tags:
                - section-1
                - level-1
                - "1.1.1.1"

            - name: 1.1.1.3 Ensure mounting of udf filesystems is disabled
              block:
                - name: 1.1.1.3 Ensure mounting of udf filesystems is disabled
                  ansible.builtin.lineinfile:
                    dest: "{{ cis_modprobe_conf_path }}"
                    regexp: "^#?.*install udf"
                    line: "install udf /bin/true"
                    create: true
              tags:
                - section-1
                - level-1
                - "1.1.1.3"
          tags:
            - section-1
            - level-1
            - "1.1.1"

        - name: 1.1.2 Ensure /tmp is configured
          block:
            - name: 1.1.2 - Ensure separate partition exists for /tmp
              ansible.posix.mount:
                name: "{{ item.mountpoint }}"
                state: present
                fstype: "{{ item.fstype }}"
                src: "{{ item.device }}"
                opts: "{{ item.opts }}"
              with_items:
                - "{{ fs_mounts | selectattr('mountpoint', 'equalto', '/tmp') | list }}"
          tags:
            - section-1
            - level-1
            - "1.1.2"

        - name: 1.1.3 Ensure noexec option set on /tmp partition
          block:
            - name: 1.1.3 - Ensure nodev option set on /tmp partition
              ansible.builtin.shell: findmnt -n /tmp | grep -Ev '\bnodev\b'
              failed_when: audit_1_1_3_result.rc != 1 and audit_1_1_3_result.rc != 0
              register: audit_1_1_3_result
              changed_when: true

            - name: 1.1.3 - Ensure nodev option set on /tmp partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_3_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.3"

        - name: 1.1.4 Ensure nodev option set on /tmp partition
          block:
            - name: 1.1.4 - Ensure nosuid option set on /tmp partition
              ansible.builtin.shell: findmnt -n /tmp -n | grep -Ev '\bnodev\b'
              failed_when: audit_1_1_4_result.rc != 1 and audit_1_1_4_result.rc != 0
              register: audit_1_1_4_result
              changed_when: true

            - name: 1.1.4 - Ensure nosuid option set on /tmp partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_4_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.4"

        - name: 1.1.5 Ensure nosuid option set on /tmp partition
          block:
            - name: 1.1.5 Ensure nosuid option set on /tmp partition
              ansible.builtin.shell: findmnt -n /tmp -n | grep -Ev '\bnosuid\b'
              failed_when: audit_1_1_5_result.rc != 1 and audit_1_1_5_result.rc != 0
              register: audit_1_1_5_result
              changed_when: true

            - name: 1.1.5 Ensure nosuid option set on /tmp partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_5_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.5"

        - name: 1.1.6 Ensure /dev/shm is configured
          block:
            - name: 1.1.6 Ensure /dev/shm is configured
              ansible.posix.mount:
                name: "{{ item.mountpoint }}"
                state: present
                fstype: "{{ item.fstype }}"
                src: "{{ item.device }}"
                opts: "{{ item.opts }}"
              with_items:
                - "{{ fs_mounts | selectattr('mountpoint', 'equalto', '/dev/shm') | list }}"
          tags:
            - section-1
            - level-1
            - "1.1.6"

        - name: 1.1.7 Ensure noexec option set on /dev/shm partition
          block:
            - name: 1.1.7 Ensure noexec option set on /dev/shm partition
              ansible.builtin.shell: findmnt -n /dev/shm | grep -Ev '\bnoexec\b'
              failed_when: audit_1_1_7_result.rc != 1 and audit_1_1_7_result.rc != 0
              register: audit_1_1_7_result
              changed_when: true

            - name: 1.1.7 Ensure noexec option set on /dev/shm partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_7_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.7"

        - name: 1.1.8 Ensure nodev option set on /dev/shm partition
          block:
            - name: 1.1.8 Ensure nodev option set on /dev/shm partition
              ansible.builtin.shell: findmnt -n /dev/shm | grep -Ev '\bnodev\b'
              failed_when: audit_1_1_8_result.rc != 1 and audit_1_1_8_result.rc != 0
              register: audit_1_1_8_result
              changed_when: true

            - name: 1.1.8 Ensure nodev option set on /dev/shm partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_8_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.8"

        - name: 1.1.9 Ensure nosuid option set on /dev/shm partition
          block:
            - name: 1.1.9 Ensure nosuid option set on /dev/shm partition
              ansible.builtin.shell: findmnt -n /dev/shm | grep -Ev '\bnosuid\b'
              failed_when: audit_1_1_9_result.rc != 1 and audit_1_1_9_result.rc != 0
              register: audit_1_1_9_result
              changed_when: true

            - name: 1.1.9 Ensure nosuid option set on /dev/shm partition
              ansible.builtin.debug:
                msg: "{{ audit_1_1_9_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.9"

        - name: 1.1.20 Ensure nodev option set on removable media partitions
          block:
            - name: 1.1.20 Ensure nodev option set on removable media partitions
              ansible.builtin.script:
                cmd: "files/audit_1.1.20.sh"
              register: audit_1_1_20_result

            - name: 1.1.20 Ensure nodev option set on removable media partitions
              ansible.builtin.debug:
                msg: "{{ audit_1_1_20_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.20"

        - name: 1.1.21 Ensure nosuid option set on removable media partitions
          block:
            - name: 1.1.21 Ensure nosuid option set on removable media partitions
              ansible.builtin.script:
                cmd: "files/audit_1.1.21.sh"
              register: audit_1_1_21_result

            - name: 1.1.20 Ensure nodev option set on removable media partitions
              ansible.builtin.debug:
                msg: "{{ audit_1_1_21_result.stdout_lines }}"
          tags:
            - section-1
            - level-1
            - "1.1.21"

        - name: 1.1.22 Ensure sticky bit is set on all world-writable directories
          block:
            - name: 1.1.22 Ensure sticky bit is set on all world-writable directories
              ansible.builtin.shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d -perm -0002 2>/dev/null | xargs chmod a+t
              changed_when: true
          tags:
            - section-1
            - level-1
            - "1.1.22"

        - name: 1.1.23 Disable Automounting
          block:
            - name: 1.1.23 Disable Automounting
              ansible.builtin.service:
                name: autofs
                enabled: false
              when: "'autofs' in ansible_facts.packages"
          tags:
            - section-1
            - level-1
            - "1.1.23"

        - name: 1.1.24 Disable USB Storage
          block:
            - name: 1.1.24 Disable USB Storage
              ansible.builtin.lineinfile:
                dest: "{{ cis_modprobe_conf_path }}"
                regexp: "^(#)?install usb-storage(\\s|$)"
                line: "install usb-storage /bin/true"
                create: true
                owner: root
                group: root
                mode: 0640

            - name: 1.1.24 Disable USB Storage
              modprobe:
                name: usb-storage
                state: absent
          tags:
            - section-1
            - level-1
            - "1.1.24"
      tags:
        - section-1
        - level-1
        - "1.1"

    - name: 1.2 Configure Software Updates
      block:
        - name: 1.2.1 Ensure GPG keys are configured
          block:
            # 1.2 Configure Software Updates | 1.2.1  Ensure GPG keys are configured (Manual)
            - name: 1.2.1 Ensure GPG keys are configured
              ansible.builtin.command: "rpm -q gpg-pubkey --qf '%{name}-%{version}-%{release} --> %{summary}\n'"
              register: gpg_keys
              changed_when: true
              args:
                warn: false

            - name: 1.2.1 Ensure GPG keys are configured (Manual)
              ansible.builtin.debug:
                msg: "{{ gpg_keys.stdout_lines }}"
          tags:
            - "1.2.1"

        - name: 1.2.2 Ensure package manager repositories are configured
          ansible.builtin.yum:
            list: repolist
          register: repolist_result
          tags:
            - "1.2.2"

        - name: 1.2.3 Ensure gpgcheck is globally activated
          block:
            # 1.2 Configure Software Updates | 1.2.3 Ensure gpgcheck is globally activated
            - name: 1.2.3 Ensure gpgcheck is globally activated
              ansible.builtin.find:
                paths: "{{ cis_yum_repos_dir }}"
                patterns: "*.repo"
              register: yum_repos
              changed_when: false

            - name: 1.2.3 Ensure gpgcheck is globally activated
              ansible.builtin.replace:
                path: "{{ item.path }}"
                regexp: "^gpgcheck=0"
                replace: "gpgcheck=1"
              loop: "{{ yum_repos.files }}"
          tags:
            - "1.2.3"
      tags:
        - section-1
        - level-1
        - "1.2"

    # - name: 1.3 Filesystem Integrity Checking
    #   block:
    #     - name: 1.3.1 Ensure AIDE is installed
    #       block:
    #         # 1.3 Filesystem Integrity Checking | 1.3.1 Ensure AIDE is installed
    #         - name: 1.3.1 Ensure AIDE is installed
    #           ansible.builtin.yum:
    #             name: aide
    #             state: present

    #         - name: 1.3.1 Ensure AIDE is installed
    #           ansible.builtin.stat:
    #             path: "{{ cis_aide_database_path }}"
    #           register: aide_1_3_1_result

    #         # We expect that 'aide --init' has been run and the generated database has been moved
    #         - name: 1.3.1 - Ensure AIDE database exists
    #           ansible.builtin.command: "{{ item }}"
    #           when: aide_1_3_1_result.stat.exists is not defined or not aide_1_3_1_result.stat.exists
    #           changed_when: true
    #           loop:
    #             - "aide --init"
    #             - "mv {{ cis_aide_src_database_path }} {{ cis_aide_database_path }}"
    #       tags:
    #         - "1.3.1"

    #     - name: 1.3.2 - Ensure cron is installed
    #       block:
    #         # 1.3 Filesystem Integrity Checking | 1.3.2 Ensure filesystem integrity is regularly checked
    #         - name: 1.3.2 - Ensure cron is installed
    #           ansible.builtin.yum:
    #             list: cronie
    #             state: installed

    #         - name: 1.3.2 - Create cron entry to run aide filesystem integrity check regularly
    #           ansible.builtin.cron:
    #             name: "CIS 1.3.2 - Run aide filesystem integrity check"
    #             user: "{{ cis_aide_cron_user }}"
    #             job: "{{ cis_aide_cron_job }}"
    #             minute: "{{ cis_aide_cron_minute|default('0') }}"
    #             hour: "{{ cis_aide_cron_hour|default('5') }}"
    #             weekday: "{{ cis_aide_cron_day|default('*') }}"
    #             day: "{{ cis_aide_cron_dom|default('*') }}"
    #             month: "{{ cis_aide_cron_month|default('*') }}"
    #             state: present
    #       tags:
    #         - "1.3.2"
    #   tags:
    #     - section-1
    #     - level-1
    #     - "1.3"

    - name: 1.4 Secure Boot Settings
      block:
        - name: 1.4.1 Ensure permissions on bootloader config are configur
          block:
            - name: 1.4.1 Ensure permissions on bootloader config are configured
              block:
                # 1.4 Secure Boot Settings | 1.4.1 Ensure permissions on bootloader config are configured
                - name: 1.4.1 Ensure permissions on bootloader config are configured
                  ansible.builtin.stat:
                    path: "{{ cis_grub_bootloader_path }}"
                  register: grub_1_4_1

                - name: 1.4.1 Ensure permissions on bootloader config are configured
                  ansible.builtin.file:
                    path: "{{ cis_grub_bootloader_path }}"
                    owner: root
                    group: root
                    mode: 0600
                  when: grub_1_4_1.stat.exists
              tags:
                - "1.4.1"

            - name: 1.4.2 Ensure authentication required for single user mode
              block:
                - name: 1.4.2 - Check if rescue.service file exists
                  ansible.builtin.stat:
                    path: "{{ cis_rescue_path }}"
                  register: rescue_service_1_4_2

                - name: 1.4.2 - Ensure authentication is required for single-user mode
                  ansible.builtin.copy:
                    dest: "{{ cis_rescue_path }}"
                    content: "ExecStart=-/bin/sh -c \"/sbin/sulogin; /usr/bin/systemctl --fail --no-block default\" \n"
                    owner: root
                    group: root
                    mode: 0644
                  when: rescue_service_1_4_2.stat.exists is not defined or not rescue_service_1_4_2.stat.exists

                - name: 1.4.2 - Ensure authentication is required for single-user mode
                  ansible.builtin.lineinfile:
                    dest: "{{ cis_rescue_path }}"
                    regexp: "^ExecStart=?-\\/bin\\/sh.*\\-c"
                    line: 'ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block default"'
                  when: rescue_service_1_4_2.stat.exists is defined and rescue_service_1_4_2.stat.exists

                - name: 1.4.2 - Check if emergency.service file exists
                  ansible.builtin.stat:
                    path: "{{ cis_emergency_path }}"
                  register: emergency_service_1_4_2

                - name: 1.4.2 - Ensure authentication is required for single-user mode
                  ansible.builtin.copy:
                    dest: "{{ cis_emergency_path }}"
                    content: "ExecStart=-/bin/sh -c \"/sbin/sulogin; /usr/bin/systemctl --fail --no-block default\" \n"
                    owner: root
                    group: root
                    mode: 0644
                  when: emergency_service_1_4_2.stat.exists is not defined or not emergency_service_1_4_2.stat.exists

                - name: 1.4.2 - Ensure authentication is required for single-user mode
                  ansible.builtin.lineinfile:
                    dest: "{{ cis_emergency_path }}"
                    regexp: "^ExecStart="
                    line: 'ExecStart=-/bin/sh -c "/sbin/sulogin; /usr/bin/systemctl --fail --no-block default"'
                  when: emergency_service_1_4_2.stat.exists is defined and emergency_service_1_4_2.stat.exists
              tags:
                - "1.4.2"
                - section-1
                - level-1
      tags:
        - section-1
        - level-1
        - "1.4"

    - name: 1.5 Additional Process Hardening
      block:
        # 1.5 Additional Process Hardening | 1.5.1 Ensure core dumps are restricted
        - name: 1.5.1 Ensure core dumps are restricted
          block:
            - name: 1.5.1 Ensure core dumps are restricted
              ansible.builtin.stat:
                path: "{{ cis_security_limits_conf_path }}"
              register: security_limits_1_5_1

            - name: 1.5.1 - Ensure core dumps are restricted
              ansible.builtin.copy:
                dest: "{{ cis_security_limits_conf_path }}"
                content: "* hard core 0\n"
                owner: root
                group: root
                mode: 0644
              when: security_limits_1_5_1.stat.exists is not defined or not security_limits_1_5_1.stat.exists

            - name: 1.5.1 - Ensure core dumps are restricted
              pam_limits:
                dest: "{{ cis_security_limits_conf_path }}"
                limit_item: "core"
                limit_type: "hard"
                domain: "*"
                value: "0"
              when: security_limits_1_5_1.stat.exists is defined and security_limits_1_5_1.stat.exists

            - name: 1.5.1 - Prevent suid programs from dumping core
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: fs.suid_dumpable, value: 0 }
              #notify: Reload sysctl

            - name: 1.5.1 Ensure core dumps are restricted | coredump.conf"
              ansible.builtin.lineinfile:
                dest: "{{ cis_systemd_coredump_conf }}"
                regexp: "{{ item.regex }}"
                line: "{{ item.line }}"
              loop:
                - { regex: "^#?.*Storage", line: "#Storage=none" }
                - { regex: "^#?.*ProcessSizeMax", line: "#ProcessSizeMax=0" }
              when: "'systemd' in ansible_facts.packages"
          tags:
            - "1.5.1"

          # 1.5.2 Ensure XD/NX support is enabled | 1.5.2 Ensure XD/NX support is enabled
        - name: 1.5.2 Ensure XD/NX support is enabled
          ansible.builtin.shell: dmesg|grep -E "NX|XD" | grep " active"
          changed_when: false
          tags:
            - "1.5.2"

          # 1.5 Additional Process Hardening | 1.5.3 Ensure address space layout randomization (ASLR) is enabled
        - name: 1.5.3 Ensure address space layout randomization (ASLR) is enabled
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: kernel.randomize_va_space, value: 2 }
          tags:
            - "1.5.3"

          # 1.5 Additional Process Hardening| 1.5.4 Ensure prelink is not installed
        - name: 1.5.4 Ensure prelink is not installed
          ansible.builtin.package:
            name: prelink
            state: absent
          when: "'prelink' in ansible_facts.packages"
          tags:
            - "1.5.4"
      tags:
        - section-1
        - level-1
        - "1.5"

    - name: 1.6 Mandatory Access Control
      block:
        # 1.6 Mandatory Access Control | 1.6.1 Configure SELinux | 1.6.1.1 Ensure SELinux is installed
        - name: 1.6.1 Configure SELinux
          block:
            - name: 1.6.1.1 Ensure SELinux is installed
              ansible.builtin.package:
                name: libselinux
                state: present
              tags:
                - "1.6.1.1"

            - name: 1.6.1.2 Ensure SELinux is not disabled in bootloader configuration
              block:
            #     - name: 1.6.1.2 Ensure SELinux is not disabled in bootloader configuration
            #       ansible.builtin.replace:
            #         dest: "{{ cis_grub_conf_path }}"
            #         regexp: '^(GRUB_CMDLINE_LINUX_DEFAULT=.*)\"$'
            #         replace: '\1 {{ item }}=1"'
            #       loop:
            #         - selinux
            #         - enforcing
            #       #notify: Reconfigure GRUB

                - name: 1.6.1.2 Ensure SELinux is not disabled in bootloader configuration
                  ansible.builtin.script:
                    cmd: "files/audit_1.6.1.2.sh"
                  register: audit_1_6_1_2_result

                - name: 1.6.1.2 Ensure SELinux is not disabled in bootloader configuration
                  ansible.builtin.debug:
                    msg: "{{ audit_1_6_1_2_result.stdout_lines }}"
              tags:
                - "1.6.1.2"

            - name: 1.6.1.3 Ensure SELinux policy is configured | libselinux-pytho
              block:
                - name: 1.6.1.3 Ensure SELinux policy is configured
                  ansible.builtin.lineinfile:
                    dest: "{{ cis_sysconfig_selinux }}"
                    regexp: "{{ item.regexp }}"
                    line: '{{ item.line }}'
                  loop:
                    - regexp: ^(#)?SELINUX?=.*
                      line: SELINUX=disabled
                    - regexp: ^(#)?SELINUXTYPE?=.*
                      line: SELINUXTYPE=targeted

                # - name: 1.6.1.3 Ensure SELinux policy is configured | libselinux-python
                #   yum:
                #     name: libselinux-python
                #     state: present

                # - name: 1.6.1.3 Ensure SELinux policy is configured | policycoreutils-python
                #   yum:
                #     name: policycoreutils-python
                    # state: present

                # - name: 1.6.1.3 Ensure SELinux policy is configured
                #   ansible.posix.selinux:
                #     configfile: "{{ cis_selinux_config_path }}"
                #     policy: "targeted"
                #     state: "disabled"
              tags:
                - "1.6.1.3"

            - name: 1.6.1.4 Ensure the SELinux mode is enforcing or permissive
              block:
                - name: 1.6.1.4 Ensure the SELinux mode is enforcing or permissive
                  ansible.builtin.command: getenforce
                  changed_when: true
                  register: getenforce_result

                - name: 1.6.1.4 Ensure the SELinux mode is enforcing or permissive
                  ansible.builtin.debug:
                    msg: "{{ getenforce_result.stdout }}"
              tags:
                - "1.6.1.4"

            - name: 1.6.1.5 Ensure the SELinux mode is enforcing
              block:
                - name: 1.6.1.5 Ensure the SELinux mode is enforcing
                  ansible.builtin.command: grep -Ei '^\s*SELINUX=(disabled|enforcing|permissive)' /etc/selinux/config
                  changed_when: true
                  register: selinux_result

                - name: 1.6.1.5 Ensure the SELinux mode is enforcing
                  ansible.builtin.debug:
                    msg: "{{ selinux_result.stdout }}"
              tags:
                - "1.6.1.5"

            - name: 1.6.1.6 Ensure no unconfined services exist
              block:
                - name: 1.6.1.6 Ensure no unconfined services exist
                  ansible.builtin.shell: ps -eZ | egrep "initrc" | egrep -vw "tr|ps|egrep|bash|awk" | tr ':' ' ' | awk '{ print $NF }'
                  register: unconfined_services_result
                  failed_when: false
                  changed_when: true

                - name: 1.6.1.6 Ensure no unconfined services exist
                  ansible.builtin.debug:
                    msg: "There are no unconfined daemons found on your system"
                  when: unconfined_services_result.stdout | length == 0

                - name: 1.6.1.6 Ensure no unconfined services exist
                  ansible.builtin.debug:
                    msg: "Warning! You have unconfined daemons: {{ unconfined_services_result.stdout_lines }}"
                  when: unconfined_services_result.stdout | length > 0
              tags:
                - "1.6.1.6"

            - name: 1.6.1.7 Ensure SETroubleshoot is not installed
              ansible.builtin.package:
                name: setroubleshoot
                state: absent
              when: "'setroubleshoot' in ansible_facts.packages"
              tags:
                - "1.6.1.7"

            - name: 1.6.1.8 Ensure the MCS Translation Service (mcstrans) is not installed
              ansible.builtin.package:
                name: mcstrans
                state: absent
              when: "'mcstrans' in ansible_facts.packages"
              tags:
                - "1.6.1.8"
      tags:
        - section-1
        - level-1
        - "1.6"

    - name: 1.7 Command Line Warning Banners
      block:
        - name: 1.7.1 Ensure message of the day is configured properly
          block:
            - name: 1.7.1 Ensure message of the day is configured properly
              ansible.builtin.file:
                path: "{{ cis_motd_dir }}/{{ item }}"
                state: absent
              loop:
                - 30-banner
                - 50-amazon-linux-extras-news
                - 70-available-updates

            - name: 1.7.1 Ensure message of the day is configured properly
              ansible.builtin.copy:
                dest: "{{ item }}"
                content: "{{ cis_local_login_warning_banner }}"
                owner: root
                group: root
                mode: 0644
              loop:
                - "{{ cis_motd_banner_path }}"
                - "{{ cis_lib_motd_path }}"
                - "{{ cis_motd_path }}"

            - name: 1.7.1 Ensure message of the day is configured properly
              ansible.builtin.command: /usr/sbin/update-motd
              changed_when: true
          tags:
            - section-1
            - level-1
            - "1.7.1"

        - name: 1.7.2 Ensure local login warning banner is configured properly
          ansible.builtin.copy:
            content: "{{ cis_local_login_warning_banner }}"
            dest: "{{ cis_issue_path }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-1
            - level-1
            - "1.7.2"

        - name: 1.7.3 Ensure remote login warning banner is configured properly
          ansible.builtin.copy:
            src: "issue.net"
            dest: "{{ cis_issue_net_path }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-1
            - level-1
            - "1.7.1.3"

        - name: 1.7.4 Ensure permissions on /etc/motd are configured
          ansible.builtin.file:
            path: "{{ cis_motd_path }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - "1.7.1.4"

        - name: 1.7.5 Ensure permissions on /etc/issue are configured
          ansible.builtin.file:
            path: "{{ cis_issue_path }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - "1.7.1.5"

        - name: 1.7.6 Ensure permissions on /etc/issue.net are configured
          ansible.builtin.file:
            path: "{{ cis_issue_net_path }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - "1.7.1.6"

    - name: 1.8 Ensure updates, patches, and additional security software are installed
      block:
        - name: 1.8 Ensure updates, patches, and additional security software are installed
          ansible.builtin.yum:
            name: "*"
            security: true
            update_only: true
      tags:
        - section-1
        - level-1
          - "1.8"
  tags:
    - section-1
    - level-1
    - "1"

- name: 2 Services
  block:
    - name: 2.1 Special Purpose Services
      block:
        - name: 2.1.1 Time Synchronization
          block:
            - name: 2.1.1.1 - Ensure chrony is installed if applicable
              ansible.builtin.package:
                name: "{{ item.name }}"
                state: "{{ item.state }}"
              when: cis_enable_chrony
              loop:
                - { name: "chrony", state: "present" }
                - { name: "ntp", state: "absent" }
              tags:
                - section-1
                - level-1
                - "2.1.1.1"

            - name: 2.1.1.2 Ensure chrony is configured
              block:
                - name: 2.1.1.2 Ensure chrony is configured
                  ansible.builtin.stat:
                    path: "{{ cis_chrony_conf_path }}"
                  register: chrony_configure_2_1_1_2
                  when: cis_enable_chrony

                - name: 2.1.1.2 Ensure chrony is configured
                  ansible.builtin.command: "egrep -c '^(server|pool)' {{ cis_chrony_conf_path }}"
                  ignore_errors: true
                  changed_when: true
                  register: line_matched
                  when: cis_enable_chrony

                - name: 2.1.1.2 Ensure chrony is configured
                  ansible.builtin.replace:
                    path: "{{ cis_chronyd_path }}"
                    regexp: "^OPTIONS=.*$"
                    replace: 'OPTIONS="-u chrony"'
              tags:
                - section-1
                - level-1
                - "2.1.1.2"
          tags:
            - section-1
            - level-1
            - "2.1.1"

        - name: 2.1.2 Ensure X11 Server components are not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - "@X Window System"
            - "xorg-x11*"
          tags:
            - section-1
            - level-1
            - "2.1.2"

        - name: 2.1.3 Ensure Avahi Server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - avahi-autoipd
            - avahi
          when: ("'avahi' in ansible_facts.packages") or ("'avahi-autoipd' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.3"

        - name: 2.1.4 Ensure CUPS is not installed
          ansible.builtin.package:
            name: cups
            state: absent
          when: "'cups' in ansible_facts.packages"
          tags:
            - section-1
            - level-1
            - "2.1.4"

        - name: 2.1.5 Ensure DHCP Server is not installed
          ansible.builtin.package:
            name: dhcp
            state: absent
          when: "'dhcp' in ansible_facts.packages"
          tags:
            - section-1
            - level-1
            - "2.1.5"

        - name: 2.1.6 Ensure LDAP server is not installed
          ansible.builtin.package:
            name: openldap-servers
            state: absent
          when: "'openldap-servers' in ansible_facts.packages"
          tags:
            - "2.1.6"

        - name: 2.1.7 Ensure DNS Server is not installed
          ansible.builtin.package:
            name: bind
            state: absent
          when: "'bind' in ansible_facts.packages"
          tags:
            - section-1
            - level-1
            - "2.1.7"

        - name: 2.1.8 Ensure FTP Server is not installed
          ansible.builtin.package:
            name: vsftpd
            state: absent
          when: "'vsftpd' in ansible_facts.packages"
          tags:
            - section-1
            - level-1
            - "2.1.8"

        - name: 2.1.9 Ensure HTTP server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - apache
            - apache2
            - lighttpd
            - nginx
            - httpd
          when:
            - ("'apache' in ansible_facts.packages")
            - ("'apache2' in ansible_facts.packages")
            - ("'lighttpd' in ansible_facts.packages")
            - ("'nginx' in ansible_facts.packages")
            - ("'httpd' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.9"

        - name: 2.1.10 Ensure IMAP and POP3 server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - dovecot
            - cyrus-imapd
            - courier-imap
          when:
            - ("'dovecot' in ansible_facts.packages")
            - ("'cyrus-imapd' in ansible_facts.packages")
            - ("'courier-imap' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.10"

        - name: 2.1.11 Ensure Samba is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - samba
            - smb
          when:
            - ("'samba' in ansible_facts.packages")
            - ("'smb' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.11"

        - name: 2.1.12 Ensure HTTP Proxy Server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - squid
          when:
            - ("'squid' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.12"

        - name: 2.1.13 Ensure net-snmp is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - net-snmp
          when:
            - ("'net-snmp' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.13"

        - name: 2.1.14 Ensure NIS server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - ypserv
          when:
            - ("'ypserv' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.14"

        - name: 2.1.15 Ensure telnet-server is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - telnet-server
          when:
            - ("'telnet-server' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.15"

        - name: 2.1.16 Ensure mail transfer agent is configured for local-only mode
          ansible.builtin.lineinfile:
            dest: "{{ cis_postfix_conf_path }}"
            regexp: "^(#)?inet_interfaces"
            line: "inet_interfaces = localhost" # "inet_interfaces = loopback-only"
          #notify: Restart postfix
          when:
            - ("'postfix' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.16"

        - name: 2.1.17 Ensure nfs-utils is not installed or the nfs-server service is masked
          block:
            - name: 2.1.17 Ensure nfs-utils is not installed or the nfs-server service is masked
              ansible.builtin.package:
                name: "{{ item }}"
                state: absent
              loop:
                - nfs-utils
              when:
                - ("'nfs-utils' in ansible_facts.packages")
                - (not cis_nfs_utils)

            - name: 2.1.17 Ensure the nfs-server service is masked (If the nfs-package is required as a dependency)
              ansible.builtin.systemd:
                name: nfs-server
                masked: true
              when:
                - (cis_nfs_utils)
          tags:
            - section-1
            - level-1
            - "2.1.17"

        - name: 2.1.18 Ensure rpcbind is not installed or the rpcbind services are masked
          block:
            - name: 2.1.18 Ensure rpcbind is not installed or the rpcbind services are masked
              ansible.builtin.package:
                name: "{{ item }}"
                state: absent
              loop:
                - rpcbind
              when:
                - ("'rpcbind' in ansible_facts.packages")
                - (not cis_rpcbind)

            - name: 2.1.18 Ensure the rpcbind services are masked  (If the rpcbind is required as a dependency)
              ansible.builtin.systemd:
                name: "{{ item }}"
                masked: true
              loop:
                - rpcbind
                - rpcbind.socket
              when:
                - (cis_rpcbind)
          tags:
            - section-1
            - level-1
            - "2.1.18"

        - name: 2.1.19 Ensure rsync is not installed or the rsyncd service is masked
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - rsync
          when:
            - ("'rsync' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.1.19"
      tags:
        - section-1
        - level-1
        - "2.1"

    - name: 2.2 Service Clients
      block:
        - name: 2.2.2 Ensure rsh client is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - rsh
          when:
            - ("'rsh' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.2.2"

        - name: 2.2.3 Ensure talk client is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - talk
          when:
            - ("'talk' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.2.3"

        - name: 2.2.4 Ensure telnet client is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - telnet
          when:
            - ("'telnet' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.2.4"

        - name: 2.2.5 Ensure LDAP client is not installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: absent
          loop:
            - openldap-clients
          when:
            - ("'openldap-clients' in ansible_facts.packages")
          tags:
            - section-1
            - level-1
            - "2.2.5"
      tags:
        - section-1
        - level-1
        - "2.2"
  tags:
    - section-2
    - level-1
    - "2"
- name: 3 Network Configuration
  block:
    - name: 3.1 Disable unused network protocols and devices
      block:
        - name: 3.1.2 Ensure wireless interfaces are disabled
          block:
            - name: 3.1.2 Ensure wireless interfaces are disabled
              ansible.builtin.script:
                cmd: "files/audit_3.1.2_1.sh"
              register: audit_3_1_2_result

            - name: 3.1.2 Ensure wireless interfaces are disabled
              ansible.builtin.debug:
                msg: "{{ audit_3_1_2_result.stdout }}"

            - name: 3.1.2 Ensure wireless interfaces are disabled
              ansible.builtin.script:
                cmd: "files/audit_3.1.2_2.sh"
              when: (audit_3_1_2_result.stdout_lines | length > 0)
          tags:
            - section-1
            - level-1
            - "3.1.2"
      tags:
        - "3.1"
        - section-1
        - level-1

    - name: 3.2 Network Parameters
      block:
        - name: 3.2.1 Ensure forwarding is disabled | IPv4
          block:
            - name: 3.2.1 Ensure forwarding is disabled | IPv4
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv4.ip_forward, value: 0 }
                - { name: net.ipv4.route.flush, value: 1 }

            - name: 3.2.1 Ensure forwarding is disabled | IPv6
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv6.conf.all.forwarding, value: 0 }
                - { name: net.ipv6.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.2.1"

        - name: 3.2.2 Ensure packet redirect sending is disabled
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.conf.all.send_redirects, value: 0 }
            - { name: net.ipv4.conf.default.send_redirects, value: 0 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.2.2"
      tags:
        - "3.2"
        - section-1
        - level-1
    - name: 3.3 Network Parameters
      block:
        - name: 3.3.1 Ensure source routed packets are not accepted
          block:
            - name: 3.3.1 Ensure source routed packets are not accepted | IPv4
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
                - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
                - { name: net.ipv4.route.flush, value: 1 }

            - name: 3.3.1 Ensure source routed packets are not accepted | IPv6
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv6.conf.all.accept_source_route, value: 0 }
                - { name: net.ipv6.conf.default.accept_source_route, value: 0 }
                - { name: net.ipv6.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.1"

        - name: 3.3.2 Ensure ICMP redirects are not accepted
          block:
            - name: 3.3.2 Ensure ICMP redirects are not accepted | IPv4
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv4.conf.all.accept_redirects, value: 0 }
                - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
                - { name: net.ipv4.route.flush, value: 1 }

            - name: 3.3.2 Ensure ICMP redirects are not accepted | IPv6
              ansible.posix.sysctl:
                name: "{{ item.name }}"
                value: "{{ item.value }}"
                state: present
                reload: true
                sysctl_set: true
                ignoreerrors: true
              loop:
                - { name: net.ipv6.conf.all.accept_redirects, value: 0 }
                - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
                - { name: net.ipv6.route.flush, value: 1 }
          tags:
            - "3.3.2"

        - name: 3.3.3 Ensure secure ICMP redirects are not accepted
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
            - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.3"

        - name: 3.3.4 Ensure suspicious packets are logged
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.conf.all.log_martians, value: 1 }
            - { name: net.ipv4.conf.default.log_martians, value: 1 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.4"

        - name: 3.3.5 Ensure broadcast ICMP requests are ignored
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.icmp_echo_ignore_broadcasts, value: 1 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.5"

        - name: 3.3.6 Ensure bogus ICMP responses are ignored
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.icmp_ignore_bogus_error_responses, value: 1 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.6"

        - name: 3.3.7 Ensure Reverse Path Filtering is enabled
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.conf.all.rp_filter, value: 1 }
            - { name: net.ipv4.conf.default.rp_filter, value: 1 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.7"

        - name: 3.3.8 Ensure TCP SYN Cookies is enabled
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv4.tcp_syncookies, value: 1 }
            - { name: net.ipv4.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.8"

        - name: 3.3.9 Ensure IPv6 router advertisements are not accepted
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            state: present
            reload: true
            sysctl_set: true
            ignoreerrors: true
          loop:
            - { name: net.ipv6.conf.all.accept_ra, value: 0 }
            - { name: net.ipv6.conf.default.accept_ra, value: 0 }
            - { name: net.ipv6.route.flush, value: 1 }
          tags:
            - section-1
            - level-1
            - "3.3.9"
      #notify: Reload sysctl
      tags:
        - section-1
        - level-1
        - "3.3"
  tags:
    - section-3
    - level-1
    - "3"

- name: 4 Logging and Auditing
  block:
    - name: 4.2.1 Configure rsyslog
      block:
        - name: 4.2.1.1 Ensure rsyslog is installed
          ansible.builtin.package:
            name: "{{ item }}"
            state: present
          loop:
            - rsyslog
          when:
            - ("'rsyslog' not in ansible_facts.packages")
          tags:
            - section-4
            - level-1
            - "4.2.1.1"

        - name: 4.2.1.2 Ensure rsyslog Service is enabled and running
          ansible.builtin.service:
            name: rsyslog
            enabled: true
            state: started
          tags:
            - section-4
            - level-1
            - "4.2.1.2"

        - name: 4.2.1.3 Ensure rsyslog default file permissions configured
          ansible.builtin.lineinfile:
            regexp: "^\\$FileCreateMode.*"
            line: "$FileCreateMode 0640"
            insertbefore: BOF
            dest: "{{ cis_rsyslog_conf_path }}"
          when: (cis_enable_rsyslog)
          #notify: Restart rsyslog
          tags:
            - section-4
            - level-1
            - "4.2.1.3"

        - name: 4.2.1.4 Ensure logging is configured
          ansible.builtin.debug:
            msg: "Edit the /etc/rsyslog.conf and /etc/rsyslog.d/ files as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.1.4"

        - name: 4.2.1.5 Ensure rsyslog is configured to send logs to a remote log host
          ansible.builtin.debug:
            msg: "Edit the /etc/rsyslog.conf and /etc/rsyslog.d/ files as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.1.5"

        - name: 4.2.1.6 Ensure remote rsyslog messages are only accepted on designated log hosts.
          ansible.builtin.debug:
            msg: "Edit the /etc/rsyslog.conf and /etc/rsyslog.d/ files as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.1.6"
      when: (cis_enable_rsyslog)
      #notify: Restart rsyslog
      tags:
        - section-4
        - level-1
        - "4.2.1"

    - name: 4.2.2 Configure journald
      block:
        # "This recommendation assumes that recommendation 4.2.1.5 'Ensure rsyslog is configured to send logs to a remote log host' has been implemented.
        - name: 4.2.2.1 Ensure journald is configured to send logs to rsyslog
          ansible.builtin.debug:
            msg: "Edit the /etc/systemd/journald.conf file as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.2.1"

        - name: 4.2.2.2 Ensure journald is configured to compress large log files
          ansible.builtin.debug:
            msg: "Edit the /etc/systemd/journald.conf file as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.2.2"

        - name: 4.2.2.3 Ensure journald is configured to write logfiles to persistent disk
          ansible.builtin.debug:
            msg: "Edit the /etc/systemd/journald.conf file as appropriate for your environment."
          tags:
            - section-4
            - level-1
            - "4.2.2.3"
      when: (cis_enable_rsyslog)
      tags:
        - section-4
        - level-1
        - "4.2.2"

    - name: 4.2.3 Ensure logrotate is configured
      block:
        - name: 4.2.3 verify logs are rotated according to site policy
          ansible.builtin.debug:
            msg: "Edit /etc/logrotate.conf and /etc/logrotate.d/* to ensure logs are rotated according to site policy."
      tags:
        - section-4
        - level-1
        - "4.2.3"

    - name: 4.2.4 Ensure permissions on all logfiles are configured
      block:
        - name: 4.2.4 Ensure permissions on all logfiles are configured
          ansible.builtin.command: find /var/log -type f -perm /g+wx,o+rwx -exec ls -l {} \;
          changed_when: true
          register: var_log_result

        - name: 4.2.4 Ensure permissions on all logfiles are configured
          ansible.builtin.debug:
            msg: "{{ var_log_result.stdout_lines }}"
      tags:
        - section-4
        - level-1
        - "4.2.2.3"
  tags:
    - section-4
    - level-1
    - "4"

- name: 5 Access, Authentication and Authorization
  block:
    - name: 5.1 Configure time-based job schedulers
      block:
        - name: 5.1.1 Ensure cron daemon is enabled and running
          block:
            - name: 5.1.1 Ensure cron daemon is enabled and running
              ansible.builtin.package:
                name: "{{ item }}"
                state: present
              loop:
                - cronie
              when:
                - ("'cronie' not in ansible_facts.packages")

            - name: 5.1.1 Ensure cron daemon is enabled and running
              ansible.builtin.service:
                name: crond
                enabled: true
                state: started
          tags:
            - section-5
            - level-1
            - "5.1.1"

        - name: 5.1.2 Ensure permissions on /etc/crontab are configured
          ansible.builtin.file:
            dest: "{{ cis_crontab_path }}"
            owner: root
            group: root
            mode: 0600
          tags:
            - section-5
            - level-1
            - "5.1.2"

        - name: 5.1.3 Ensure permissions on /etc/cron.hourly are configured
          ansible.builtin.file:
            dest: "{{ cis_cron_hourly_dir }}"
            owner: root
            group: root
            mode: 0700
          tags:
            - section-5
            - level-1
            - "5.1.3"

        - name: 5.1.4 Ensure permissions on /etc/cron.daily are configured
          ansible.builtin.file:
            dest: "{{ cis_cron_daily_dir }}"
            owner: root
            group: root
            mode: 0700
          tags:
            - section-5
            - level-1
            - "5.1.4"

        - name: 5.1.5 Ensure permissions on /etc/cron.weekly are configured
          ansible.builtin.file:
            dest: "{{ cis_cron_weekly_dir }}"
            owner: root
            group: root
            mode: 0700
          tags:
            - section-5
            - level-1
            - "5.1.5"

        - name: 5.1.6 Ensure permissions on /etc/cron.monthly are configured
          ansible.builtin.file:
            dest: "{{ cis_cron_monthly_dir }}"
            owner: root
            group: root
            mode: 0700
          tags:
            - section-5
            - level-1
            - "5.1.6"

        - name: 5.1.7 Ensure permissions on /etc/cron.d are configured
          ansible.builtin.file:
            dest: "{{ cis_crond_dir }}"
            owner: root
            group: root
            mode: 0700
          tags:
            - section-5
            - level-1
            - "5.1.7"

        - name: 5.1.8 Ensure cron is restricted to authorized users
          block:
            - name: 5.1.8 Ensure cron is restricted to authorized users | Remove cron.deny
              ansible.builtin.file:
                dest: "{{ cis_cron_deny_path }}"
                state: absent

            - name: 5.1.8 Ensure cron is restricted to authorized users | Check if cron.allow exists
              ansible.builtin.stat:
                path: "{{ cis_cron_allow_path }}"
              register: cron_allow_result

            - name: 5.1.8 Ensure cron is restricted to authorized users
              ansible.builtin.file:
                dest: /etc/cron.allow
                state: '{{ "file" if cron_allow_result.stat.exists else "touch" }}'
                owner: root
                group: root
                mode: 0600
          tags:
            - section-5
            - level-1
            - "5.1.8"

        - name: 5.1.9 Ensure at is restricted to authorized users
          block:
            - name: 5.1.9 Ensure at is restricted to authorized users | Remove at.deny
              ansible.builtin.file:
                dest: "{{ cis_cron_atdeny_path }}"
                state: absent

            - name: 5.1.9 Ensure at is restricted to authorized users | Check if at.allow exists
              ansible.builtin.stat:
                path: "{{ cis_at_allow_path }}"
              register: at_allow_result

            - name: 5.1.9 Ensure at is restricted to authorized users
              ansible.builtin.file:
                dest: "{{ cis_at_allow_path }}"
                state: '{{ "file" if at_allow_result.stat.exists else "touch" }}'
                owner: root
                group: root
                mode: 0600
          tags:
            - section-5
            - level-1
            - "5.1.9"
      tags:
        - section-4
        - level-1
        - "5.1"

    - name: 5.2 Configure sudo
      block:
        - name: 5.2.2 Ensure sudo commands use pty
          ansible.builtin.lineinfile:
            dest: "{{ cis_sudoers_path }}"
            regexp: "^#?.*[D|d]efaults\\s+use_pty"
            line: "Defaults    use_pty"
            validate: "/usr/sbin/visudo -cf %s"
          tags:
            - section-5
            - level-1
            - "5.2.2"

        - name: 5.2.3 Ensure sudo log file exists
          ansible.builtin.lineinfile:
            dest: "{{ cis_sudoers_path }}"
            regexp: "^#?.*[D|d]efaults\\s+logfile?="
            line: 'Defaults    logfile="/var/log/sudo.log"'
            validate: "/usr/sbin/visudo -cf %s"
          tags:
            - section-5
            - level-1
            - "5.2.3"
      tags:
        - section-5
        - level-1
        - "5.2"

    - name: 5.3 Configure SSH Server
      block:
        - name: 5.3.1 Ensure permissions on /etc/ssh/sshd_config are configured
          ansible.builtin.file:
            dest: "{{ cis_sshd_conf_path }}"
            state: file
            owner: root
            group: root
            mode: 0600
          tags:
            - section-5
            - level-1
            - "5.3.1"

        - name: 5.3.2 Ensure permissions on SSH private host key files are configured
          block:
            - name: 5.3.2 Ensure permissions on SSH private host key files are configured
              ansible.builtin.find:
                paths: "{{ cis_ssh_dir }}"
                patterns: "ssh_host_*_key"
                recurse: true
                file_type: any
              register: ssh_private_key_results

            - name: 5.3.2 Ensure permissions on SSH private host key files are configured
              ansible.builtin.file:
                path: "{{ item.path }}"
                owner: root
                group: root
                mode: 0600
              loop: "{{ ssh_private_key_results.files }}"
          tags:
            - section-5
            - level-1
            - "5.3.2"

        - name: 5.3.3 Ensure permissions on SSH public host key files are configured
          block:
            - name: 5.3.3 Ensure permissions on SSH public host key files are configured
              ansible.builtin.find:
                paths: "{{ cis_ssh_dir }}"
                patterns: "ssh_host_*_key.pub"
                recurse: true
                file_type: any
              register: ssh_public_key_results

            - name: 5.3.3 Ensure permissions on SSH public host key files are configured
              ansible.builtin.file:
                path: "{{ item.path }}"
                owner: root
                group: root
                mode: 0600
              loop: "{{ ssh_public_key_results.files }}"
          tags:
            - section-5
            - level-1
            - "5.3.3"

        - name: 5.3.4 Ensure SSH access is limited
          ansible.builtin.lineinfile:
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
          loop:
            - { regexp: "^#?.*AllowUsers.*", line: "AllowUsers {{ cis_sshd['allow_users'] }}" }
            - { regexp: "^#?.*AllowGroups.*", line: "AllowGroups {{ cis_sshd['allow_groups'] }}" }
            - { regexp: "^#?.*DenyUsers.*", line: "DenyUsers {{ cis_sshd['deny_users'] }}" }
            - { regexp: "^#?.*DenyGroups.*", line: "DenyGroups {{ cis_sshd['deny_groups'] }}" }
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.4"

        - name: 5.3.5 Ensure SSH LogLevel is appropriate
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?LogLevel"
            line: "LogLevel {{ cis_ssh_loglevel }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.5"

        - name: 5.3.6 Ensure SSH X11 forwarding is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?X11Forwarding"
            line: "X11Forwarding no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.6"

        - name: 5.3.7 Ensure SSH MaxAuthTries is set to 4 or less
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*MaxAuthTries.*"
            line: "MaxAuthTries {{ cis_sshd_max_auth_tries }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.7"

        - name: 5.3.8 Ensure SSH IgnoreRhosts is enabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*IgnoreRhosts.*"
            line: "IgnoreRhosts yes"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.8"

        - name: 5.3.9 Ensure SSH HostbasedAuthentication is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*HostbasedAuthentication.*"
            line: "HostbasedAuthentication no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.9"

        - name: 5.3.10 Ensure SSH root login is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*PermitRootLogin.*"
            line: "PermitRootLogin no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.10"

        - name: 5.3.11 Ensure SSH PermitEmptyPasswords is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*PermitEmptyPasswords.*"
            line: "PermitEmptyPasswords no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.11"

        - name: 5.3.12 Ensure SSH PermitUserEnvironment is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*PermitUserEnvironment.*"
            line: "PermitUserEnvironment no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.12"

        - name: 5.3.13 Ensure only strong Ciphers are used
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*Ciphers.*"
            line: "Ciphers {{ cis_sshd_ciphers }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.13"

        - name: 5.3.14 Ensure only strong MAC algorithms are used
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*MACs"
            line: "MACs {{ cis_sshd_macs }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.14"

        - name: 5.3.15 Ensure only strong Key Exchange algorithms are used
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*KexAlgorithms.*"
            line: "KexAlgorithms {{ cis_sshd_kex_algorithms }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.15"

        - name: 5.3.16 Ensure SSH Idle Timeout Interval is configured
          block:
            - name: 5.3.16 Ensure SSH Idle Timeout Interval is configured | Add line in sshd_config for ClientAliveInterval
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_sshd_conf_path }}"
                regexp: "^#?.*ClientAliveInterval.*"
                line: "ClientAliveInterval {{ cis_sshd_client_alive_interval }}"

            - name: 5.3.16 Ensure SSH Idle Timeout Interval is configured
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_sshd_conf_path }}"
                regexp: "^#?.*ClientAliveCountMax.*"
                line: "ClientAliveCountMax {{ cis_sshd_client_alive_count_max }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.16"

        - name: 5.3.17 Ensure SSH LoginGraceTime is set to one minute or less
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*LoginGraceTime.*"
            line: "LoginGraceTime {{ cis_sshd_login_grace_time }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.17"

        - name: 5.3.18 Ensure SSH warning banner is configured
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*Banner.*"
            line: "Banner /etc/issue.net"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.18"

        - name: 5.3.19 Ensure SSH PAM is enabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*UsePAM.*"
            line: "UsePAM yes"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.19"

        - name: 5.3.20 Ensure SSH AllowTcpForwarding is disabled
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*AllowTcpForwarding.*"
            line: "AllowTcpForwarding no"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.20"

        - name: 5.3.21 Ensure SSH MaxStartups is configured
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*MaxStartups.*"
            line: "MaxStartups 10:30:60"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.21"

        - name: 5.3.22 Ensure SSH MaxSessions is limited
          ansible.builtin.lineinfile:
            state: present
            dest: "{{ cis_sshd_conf_path }}"
            regexp: "^#?.*MaxSessions.*"
            line: "MaxSessions {{ cis_ssh_maxsessions }}"
          #notify: Restart sshd
          tags:
            - section-5
            - level-1
            - "5.3.22"
      tags:
        - section-5
        - level-1
        - "5.3"

    - name: 5.4 Configure PAM
      block:
        - name: 5.4.1 Ensure password creation requirements are configured
          ansible.builtin.lineinfile:
            dest: "{{ cis_pwquality_conf_path }}"
            regexp: "^{{ item.key }}"
            line: "{{ item.key }} = {{ item.value }}"
          loop:
            - { key: "minlen", value: "14" }
            - { key: "minclass", value: "4" }

        - name: |
            5.4.2 Ensure lockout for failed password attempts is configured
            5.4.3 Ensure password hashing algorithm is SHA-512
            5.4.4 Ensure password reuse is limited
          ansible.builtin.template:
            src: "{{ cis_password_auth_template }}"
            dest: /etc/pam.d/{{ item }}
          loop:
            - "system-auth"
            - "password-auth"
          tags:
            - section-5
            - level-1
            - "5.4.2"
            - "5.4.3"
            - "5.4.4"
      tags:
        - section-5
        - level-1
        - "5.4"

    - name: 5.5 User Accounts and Environment
      block:
        - name: 5.5.1 Set Shadow Password Suite Parameters
          block:
            - name: 5.5.1.1 Ensure password expiration is 365 days or less
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_login_defs_path }}"
                regexp: ^#?.*PASS_MAX_DAYS.*
                line: "PASS_MAX_DAYS   {{ cis_pass['max_days'] }}"
              tags:
                - section-5
                - level-1
                - "5.5.1.1"

            - name: 5.5.1.2 Ensure minimum days between password changes is configured
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_login_defs_path }}"
                regexp: ^#?.*PASS_MIN_DAYS.*
                line: "PASS_MIN_DAYS   {{ cis_pass['pass_min_days'] }}"
              tags:
                - section-5
                - level-1
                - "5.5.1.2"

            - name: 5.5.1.3 Ensure password expiration warning days is 7 or more
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_login_defs_path }}"
                regexp: ^#?.*PASS_WARN_AGE.*
                line: "PASS_WARN_AGE   {{ cis_pass['pass_warn_age'] }}"
              tags:
                - section-5
                - level-1
                - "5.5.1.3"

            - name: 5.5.1.4 Ensure inactive password lock is 30 days or les
              block:
                - name: 5.5.1.4 Ensure inactive password lock is 30 days or less
                  ansible.builtin.lineinfile:
                    state: present
                    dest: "{{ cis_default_useradd_path }}"
                    regexp: ^#?.*INACTIVE=.*
                    line: "INACTIVE={{ cis_pass['inactive_lock'] }}"

                - name: 5.5.1.4 Ensure inactive password lock is 30 days or less
                  ansible.builtin.shell: "egrep ^[^:]+:[^\\!*] /etc/shadow | cut -d: -f1"
                  changed_when: true
                  register: inctive_users_result

                - name: 5.5.1.4 Ensure inactive password lock is 30 days or less
                  ansible.builtin.command: "chage --inactive {{ cis_pass['inactive_lock'] }} {{ item }}"
                  changed_when: true
                  loop: "{{ inctive_users_result.stdout_lines }}"
              tags:
                - section-5
                - level-1
                - "5.5.1.4"

            - name: 5.5.1.5 Ensure all users last password change date is in the past
              block:
                - name: 5.5.1.5 Ensure all users last password change date is in the past
                  ansible.builtin.shell: "egrep ^[^:]+:[^\\!*] /etc/shadow | cut -d: -f1"
                  changed_when: true
                  register: users_pass_result

                - name: 5.5.1.5 Ensure all users last password change date is in the past
                  ansible.builtin.command: "chage --list {{ item }}"
                  changed_when: true
                  loop: "{{ users_pass_result.stdout_lines }}"
              tags:
                - section-5
                - level-1
                - "5.5.1.4"
          tags:
            - section-5
            - level-1
            - "5.5.1"

        - name: 5.5.2 Ensure system accounts are secured
          block:
            - name: 5.5.2 Ensure system accounts are secured
              ansible.builtin.shell: "awk -F: '($3 < 500) {print $1 }' /etc/passwd | grep -v ^#"
              register: audit_5_5_2_result
              changed_when: true

            - name: 5.5.2 Ensure system accounts are secured
              ansible.builtin.command: "usermod -L {{ item }}"
              changed_when: true
              loop: "{{ audit_5_5_2_result.stdout_lines }}"
              when: item != "root"

            - name: 5.5.2 Ensure system accounts are secured
              ansible.builtin.user:
                name: "{{ item }}"
                shell: "/sbin/nologin"
              loop: "{{ audit_5_5_2_result.stdout_lines }}"
              when: ("item not in cis_skip_lock_users")
          tags:
            - section-5
            - level-1
            - "5.5.2"

        - name: 5.5.3 Ensure default group for the root account is GID 0
          ansible.builtin.command: usermod -g 0 root
          changed_when: true
          tags:
            - section-5
            - level-1
            - "5.5.3"

        - name: 5.5.4 Ensure default user shell timeout is configured
          ansible.builtin.blockinfile:
            create: true
            mode: 0644
            dest: "{{ item.dest }}"
            state: "{{ item.state }}"
            marker: "# {mark} ANSIBLE MANAGED"
            block: |
              # CIS - 5.5.4 Ensure default user shell timeout is configured
              readonly TMOUT={{ cis_shell_session_timeout['timeout'] }} ; export TMOUT
          loop:
            - dest: "{{ cis_shell_session_timeout['file'] }}"
              state: present
            - dest: /etc/profile
              state: "{{ (cis_shell_session_timeout['file'] == '/etc/profile') | ternary('present', 'absent') }}"
          tags:
            - section-5
            - level-1
            - "5.5.4"

        - name: 5.5.5 Ensure default user umask is configured
          block:
            - name: 5.5.5 Ensure default user umask is configured| Set umask for /etc/bashrc"
              ansible.builtin.replace:
                dest: "{{ item }}"
                regexp: '(^\s+umask) (002|022)'
                replace: '\1 027'
              loop: "{{ cis_umask_shell_files }}"
          tags:
            - section-5
            - level-1
            - "5.5.5"
      tags:
        - section-5
        - level-1
        - "5.5"

    - name: 5.6 Ensure root login is restricted to system console
      block:
        - name: 5.6 Ensure root login is restricted to system console
          ansible.builtin.command: cat /etc/securetty
          changed_when: true
          register: audit_5_6_result

        - name: 5.6 Ensure root login is restricted to system console
          ansible.builtin.debug:
            msg:
              - "These are the consoles with root login access, please review:"
              - "{{ audit_5_6_result.stdout_lines }}"
          tags:
            - section-5
            - level-1
            - "5.6"

        - name: 5.7 Ensure access to the su command is restricted
          block:
            - name: 5.7 Ensure access to the su command is restricted | Setting pam_wheel to use_uid
              ansible.builtin.lineinfile:
                state: present
                dest: "{{ cis_pamd_su_path }}"
                regexp: '^#?.*auth\\s+required\\s+pam_wheel\\.so'
                line: "auth            required        pam_wheel.so use_uid group={{ cis_sugroup | default('wheel') }}"

            - name: 5.7 Ensure access to the su command is restricted | wheel group contains root
              ansible.builtin.user:
                name: root
                groups: "{{ cis_sugroup | default('wheel') }}"
          tags:
            - section-5
            - level-1
            - "5.7"
  tags:
    - section-5
    - level-1
    - "5"

- name: 6 System Maintenance
  block:
    - name: 6.1 System File Permissions
      block:
        - name: 6.1.2 Ensure permissions on /etc/passwd are configured
          ansible.builtin.file:
            path: "{{ cis_etc['passwd'] }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-6
            - level-1
            - "6.1.2"

        - name: 6.1.3 Ensure permissions on /etc/passwd- are configured
          ansible.builtin.file:
            path: "{{ cis_etc['passwd_hyphen'] }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-6
            - level-1
            - "6.1.3"

        - name: 6.1.4 Ensure permissions on /etc/shadow are configured
          ansible.builtin.file:
            path: "{{ cis_etc['shadow'] }}"
            owner: root
            group: root
            mode: 0000
          tags:
            - section-6
            - level-1
            - "6.1.4"

        - name: 6.1.5 Ensure permissions on /etc/shadow- are configured
          ansible.builtin.file:
            path: "{{ cis_etc['shadow_hyphen'] }}"
            owner: root
            group: root
            mode: 0000
          tags:
            - section-6
            - level-1
            - "6.1.5"

        - name: 6.1.6 Ensure permissions on /etc/gshadow- are configured
          ansible.builtin.file:
            path: "{{ cis_etc['gshadow_hyphen'] }}"
            owner: root
            group: root
            mode: 0000
          tags:
            - section-6
            - level-1
            - "6.1.6"

        - name: 6.1.7 Ensure permissions on /etc/gshadow are configured
          ansible.builtin.file:
            path: "{{ cis_etc['gshadow'] }}"
            owner: root
            group: root
            mode: 0000
          tags:
            - section-6
            - level-1
            - "6.1.7"

        - name: 6.1.8 Ensure permissions on /etc/group are configured
          ansible.builtin.file:
            path: "{{ cis_etc['group'] }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-6
            - level-1
            - "6.1.8"

        - name: 6.1.9 Ensure permissions on /etc/group- are configured
          ansible.builtin.file:
            path: "{{ cis_etc['group_hyphen'] }}"
            owner: root
            group: root
            mode: 0644
          tags:
            - section-6
            - level-1
            - "6.1.9"

        - name: 6.1.10 Ensure no world writable files exist
          block:
            - name: 6.1.10 Ensure no world writable files exist
              ansible.builtin.shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002
              register: audit_6_1_10
              changed_when: true

            - name: 6.1.10 Ensure no world writable files exist
              ansible.builtin.debug:
                msg: "No world writable files exist"
              when: (audit_6_1_10.stdout_lines | length == 0)

            - name: 6.1.10 Ensure no world writable files exist
              ansible.builtin.file:
                path: "{{ item }}"
                mode: o-w
                state: touch
              loop: "{{ audit_6_1_10.stdout_lines }}"
              when: (audit_6_1_10.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.1.10"

        - name: 6.1.11 Ensure no unowned files or directories exist
          block:
            - name: 6.1.11 Ensure no unowned files or directories exist
              ansible.builtin.shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser
              register: audit_6_1_11
              changed_when: true

            - name: 6.1.11 Ensure no unowned files or directories exist
              ansible.builtin.debug:
                msg: "No unowned files or directories exist"
              when: (audit_6_1_11.stdout_lines | length == 0)

            - name: 6.1.11 Ensure no unowned files or directories exist
              ansible.builtin.debug:
                msg:
                  - Warning - Manual intervention is required -- missing group on items in
                  - "{{ item }}"
              with_items: "{{ audit_6_1_12.results | map(attribute='stdout_lines') }}"
              when: (audit_6_1_11.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.1.11"

        - name: 6.1.12 Ensure no ungrouped files or directories exist
          block:
            - name: 6.1.12 Ensure no ungrouped files or directories exist
              ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup
              register: audit_6_1_12
              changed_when: true

            - name: 6.1.12 Ensure no ungrouped files or directories exist
              ansible.builtin.debug:
                msg: "No ungrouped files or directories exist"
              when: (audit_6_1_12.stdout_lines | length == 0)

            - name: 6.1.12 Ensure no ungrouped files or directories exist
              ansible.builtin.debug:
                msg:
                  - "Warning - Manual intervention is required -- missing group on items in: "
                  - "{{ item }}"
              with_items: "{{ audit_6_1_12.results | map(attribute='stdout_lines') }}"
              when: (audit_6_1_12.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.1.12"

        - name: 6.1.13 Audit SUID executables
          block:
            - name: 6.1.13 Audit SUID executables
              ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -4000
              register: audit_6_1_13
              changed_when: true

            - name: 6.1.13 Audit SUID executables
              ansible.builtin.debug:
                msg:
                  - Ensure that no rogue SUID programs have been introduced into the system.
                  - Review the files returned by the action in the Audit section and confirm the integrity of these binaries
                  - "{{ audit_6_1_13.stdout_lines }}"
          tags:
            - section-6
            - level-1
            - "6.1.13"

        - name: 6.1.14 Audit SGID executables
          block:
            - name: 6.1.14 Audit SGID executables
              ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -2000
              register: audit_6_1_14
              changed_when: true

            - name: 6.1.14 Audit SGID executables
              ansible.builtin.debug:
                msg:
                  - Ensure that no rogue SGID programs have been introduced into the system
                  - Review the files returned by the action in the Audit section and confirm the integrity of these binaries
                  - "{{ audit_6_1_14.stdout_lines }}"
          tags:
            - section-6
            - level-1
            - "6.1.14"
      tags:
        - section-6
        - level-1
        - "6.1"

    - name: 6.2 User and Group Settings
      block:
        - name: 6.2.1 Ensure accounts in /etc/passwd use shadowed passwords
          block:
            - name: 6.2.1 Ensure accounts in /etc/passwd use shadowed passwords
              ansible.builtin.shell: >
                awk -F: '($2 == "" ) { print $1 " does not have a password "}' /etc/shadow
              register: audit_6_2_1
              changed_when: true

            - name: 6.2.1 Ensure accounts in /etc/passwd use shadowed passwords
              ansible.builtin.debug:
                msg: "The accounts in /etc/passwd use shadowed passwords"
              when: (audit_6_2_1.stdout_lines | length == 0)

            - name: 6.2.1 Ensure accounts in /etc/passwd use shadowed passwords
              ansible.builtin.shell: sed -e 's/^\([a-zA-Z0-9_]*\):[^:]*:/\1:x:/' -i /etc/passwd
              when: (audit_6_2_1.stdout_lines | length > 0)
              changed_when: true
              args:
                warn: false

          tags:
            - section-6
            - level-1
            - "6.2.1"

        - name: 6.2.2 Ensure /etc/shadow password fields are not empty
          ansible.builtin.command: passwd -l {{ item }}
          changed_when: true
          loop: "{{ audit_6_2_1.results | map(attribute='stdout_lines') }}"
          when: (audit_6_2_1.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.2"

        - name: 6.2.1 Ensure accounts in /etc/passwd use shadowed passwords
          block:
            - name: 6.2.3 Ensure all groups in /etc/passwd exist in /etc/group
              ansible.builtin.script:
                cmd: "files/audit_6.2.3.sh"
              register: audit_6_2_3_result

            - name: "6.2.3 | L1 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print message that all groups match between passwd and group files"
              ansible.builtin.debug:
                msg: "No users that have non-existent GUIDs (Groups)"
              when: (audit_6_2_3_result.stdout_lines | length == 0)

            - name: "6.2.3 | L1 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print warning about users with invalid GIDs missing GID entries in /etc/group"
              ansible.builtin.debug:
                msg:
                  - "Warning - Manual intervention is required: The following users have non-existent GIDs (Groups):"
                  - "{{ audit_6_2_3_result.stdout_lines }}"
              when: (audit_6_2_3_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.3"

        - name: 6.2.4 Ensure shadow group is empty
          block:
            - name: 6.2.4 Ensure shadow group is empty
              ansible.builtin.shell: >
                awk -F: '($1=="shadow") {print $NF}' /etc/group
              register: audit_6_2_4_1_result
              changed_when: true

            - name: 6.2.4 Ensure shadow group is empty
              ansible.builtin.debug:
                msg: "No users in the shadow group"
              when: (audit_6_2_4_1_result.stdout_lines | length == 0)

            - name: 6.2.4 Ensure shadow group is empty
              ansible.builtin.shell: sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\1/' /etc/group
              when: (audit_6_2_4_1_result.stdout_lines | length > 0)
              changed_when: true
              args:
                warn: false
          tags:
            - section-6
            - level-1
            - "6.2.4"

        - name: 6.2.5 Ensure no duplicate user names exist
          block:
            - name: 6.2.5 Ensure no duplicate user names exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.5.sh"
              register: audit_6_2_5_result

            - name: 6.2.5 Ensure no duplicate user names exist
              ansible.builtin.debug:
                msg: "No duplicate user names in the system"
              when: (audit_6_2_5_result.stdout_lines | length == 0)

            - name: 6.2.5 Ensure no duplicate user names exist
              ansible.builtin.debug:
                msg:
                  - "Warning: The following user names are duplicates:"
                  - "{{ audit_6_2_5_result.stdout_lines }}"
              when: (audit_6_2_5_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.6"

        - name: 6.2.6 Ensure no duplicate group names exist
          block:
            - name: 6.2.6 Ensure no duplicate group names exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.6.sh"
              register: audit_6_2_6_result

            - name: 6.2.6 Ensure no duplicate group names exist
              ansible.builtin.debug:
                msg: "No duplicate group names in the system"
              when: (audit_6_2_6_result.stdout_lines | length == 0)

            - name: 6.2.6 Ensure no duplicate group names exist
              ansible.builtin.debug:
                msg:
                  - "Warning: The following group names are duplicates:"
                  - "{{ audit_6_2_6_result.stdout_lines }}"
              when: (audit_6_2_6_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.6"

        - name: 6.2.7 Ensure no duplicate UIDs exist
          block:
            - name: 6.2.7 Ensure no duplicate UIDs exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.7.sh"
              register: audit_6_2_7_result

            - name: 6.2.7 Ensure no duplicate UIDs exist
              ansible.builtin.debug:
                msg: "No duplicate UID's in the system"
              when: (audit_6_2_7_result.stdout_lines | length == 0)

            - name: 6.2.7 Ensure no duplicate UIDs exist
              ansible.builtin.debug:
                msg:
                  - "Warning: The following group names are duplicates:"
                  - "{{ audit_6_2_6_result.stdout_lines }}"
              when: (audit_6_2_7_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.7"

        - name: 6.2.8 Ensure no duplicate GIDs exist
          block:
            - name: 6.2.8 Ensure no duplicate GIDs exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.8.sh"
              register: audit_6_2_8_result

            - name: 6.2.8 Ensure no duplicate GIDs exist
              ansible.builtin.debug:
                msg: "No duplicate GIDs in the system"
              when: (audit_6_2_8_result.stdout_lines | length == 0)

            - name: 6.2.8 Ensure no duplicate GIDs exist
              ansible.builtin.debug:
                msg:
                  - "Warning: The following groups have duplicate GIDs:"
                  - "{{ audit_6_2_6_result.stdout_lines }}"
              when: (audit_6_2_8_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.8"

        - name: 6.2.9 Ensure root is the only UID 0 account
          block:
            - name: 6.2.9 Ensure root is the only UID 0 account
              ansible.builtin.shell: >
                awk -F: '($3 == 0) { print $1 }' /etc/passwd
              register: audit_6_2_9_result
              changed_when: true

            - name: 6.2.9 Ensure root is the only UID 0 account
              ansible.builtin.debug:
                msg:
                  - "Remove any users other than root with UID 0 or assign them a new UID if appropriate:"
                  - "{{ audit_6_2_9_result.stdout_lines }}"
          tags:
            - section-6
            - level-1
            - "6.2.9"

        - name: 6.2.10 Ensure root PATH Integrity
          block:
            - name: 6.2.10 Ensure root PATH Integrity
              ansible.builtin.script:
                cmd: "files/audit_6.2.10.sh"
              register: audit_6_2_10_result

            - name: 6.2.10 Ensure root PATH Integrity
              ansible.builtin.debug:
                msg: "{{ audit_6_2_10_result.stdout_lines }}"
          tags:
            - section-6
            - level-1
            - "6.2.10"

        - name: 6.2.11 Ensure all users' home directories exist
          block:
            - name: 6.2.11 Ensure all users' home directories exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.11.1.sh"
              register: audit_6_2_11_result

            - name: 6.2.11 Ensure all users' home directories exist
              ansible.builtin.debug:
                msg: "{{ audit_6_2_11_result.stdout_lines }}"
              when: (audit_6_2_11_result.stdout_lines | length == 0)

            - name: 6.2.11 Ensure all users' home directories exist
              ansible.builtin.script:
                cmd: "files/audit_6.2.11.2.sh"
              when: (audit_6_2_11_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.11"

        - name: 6.2.12 Ensure users own their home directories
          block:
            - name: 6.2.12 Ensure users own their home directories
              ansible.builtin.script:
                cmd: "files/audit_6.2.12.1.sh"
              register: audit_6_2_12_result

            - name: 6.2.12 Ensure users own their home directories
              ansible.builtin.debug:
                msg: "{{ audit_6_2_12_result.stdout_lines }}"
              when: (audit_6_2_12_result.stdout_lines | length == 0)

            - name: 6.2.12 Ensure users own their home directories
              ansible.builtin.script:
                cmd: "files/audit_6.2.12.2.sh"
              when: (audit_6_2_12_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.12"

        - name: 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
          block:
            - name: 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
              ansible.builtin.script:
                cmd: "files/audit_6.2.13.1.sh"
              register: audit_6_2_13_result

            - name: 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
              ansible.builtin.debug:
                msg: "{{ audit_6_2_13_result.stdout_lines }}"

            # 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
            # Remediation:
            # Making global modifications to user home directories without alerting the user community
            # can result in unexpected outages and unhappy users. Therefore, it is recommended that a
            # monitoring policy be established to report user file permissions and determine the action
            # to be taken in accordance with site policy.
            # The following script can be used to remove permissions is excess of 750 from users' home
            # directories:
            # - name: 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
            #   ansible.builtin.script:
            #     cmd: "files/audit_6.2.13.2.sh"
            #   failed_when: audit_6_2_13_result.rc != 1 and audit_6_2_13_result.rc != 0
            #   when: (audit_6_2_13_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.13"

        - name: 6.2.14 Ensure users' dot files are not group or world writable
          block:
            - name: 6.2.14 Ensure users' dot files are not group or world writable
              ansible.builtin.script:
                cmd: "files/audit_6.2.14.1.sh"
              register: audit_6_2_14_result

            - name: 6.2.14 Ensure users' dot files are not group or world writable
              ansible.builtin.debug:
                msg: "{{ audit_6_2_14_result.stdout_lines }}"

            # 6.2.14 Ensure users' dot files are not group or world writable
            # Remediation:
            # Making global modifications to users' files without alerting the user community can result
            # in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring
            # policy be established to report user dot file permissions and determine the action to be
            # taken in accordance with site policy.
            # The following script will remove excessive permissions on dot files within interactive
            # users' home directories.
            # - name: 6.2.13 Ensure users' home directories permissions are 750 or more restrictive
            #   ansible.builtin.script:
            #     cmd: "files/audit_6.2.14.2.sh"
            #   failed_when: audit_6_2_14_result.rc != 1 and audit_6_2_14_result.rc != 0
            #   when: (audit_6_2_14_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.14"

        - name: 6.2.15 Ensure no users have .forward files
          block:
            - name: 6.2.15 Ensure no users have .forward files
              ansible.builtin.script:
                cmd: "files/audit_6.2.15.1.sh"
              register: audit_6_2_15_result

            - name: 6.2.15 Ensure no users have .forward files
              ansible.builtin.debug:
                msg: "{{ audit_6_2_15_result.stdout_lines }}"

            - name: 6.2.15 Ensure no users have .forward files
              ansible.builtin.script:
                cmd: "files/audit_6.2.15.2.sh"
              failed_when: audit_6_2_15_result.rc != 1 and audit_6_2_15_result.rc != 0
              when: (audit_6_2_15_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.15"

        - name: 6.2.16 Ensure no users have .netrc files
          block:
            - name: 6.2.16 Ensure no users have .netrc files
              ansible.builtin.script:
                cmd: "files/audit_6.2.16.1.sh"
              register: audit_6_2_16_result

            - name: 6.2.16 Ensure no users have .netrc files
              ansible.builtin.debug:
                msg: "{{ audit_6_2_16_result.stdout_lines }}"

        - name: 6.2.16 Ensure no users have .netrc files
          ansible.builtin.script:
            cmd: "files/audit_6.2.16.2.sh"
          failed_when: audit_6_2_16_result.rc != 1 and audit_6_2_16_result.rc != 0
          when: (audit_6_2_16_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.16"

        - name: 6.2.17 Ensure no users have .rhosts files
          block:
            - name: 6.2.17 Ensure no users have .rhosts files
              ansible.builtin.script:
                cmd: "files/audit_6.2.17.1.sh"
              register: audit_6_2_17_result

            - name: 6.2.17 Ensure no users have .rhosts files
              ansible.builtin.debug:
                msg: "{{ audit_6_2_17_result.stdout_lines }}"

            - name: 6.2.17 Ensure no users have .rhosts files
              ansible.builtin.script:
                cmd: "files/audit_6.2.17.2.sh"
              failed_when: audit_6_2_17_result.rc != 1 and audit_6_2_17_result.rc != 0
              when: (audit_6_2_17_result.stdout_lines | length > 0)
          tags:
            - section-6
            - level-1
            - "6.2.17"
      tags:
        - section-6
        - level-1
        - "6.2"
  tags:
    - section-6
    - level-1
    - "6"
